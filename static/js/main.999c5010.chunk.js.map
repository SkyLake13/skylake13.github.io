{"version":3,"sources":["components/picture/Picture.module.scss","integration/favourite.ts","components/card/useFavourite.ts","integration/flickr-client.ts","components/picture/Picture.tsx","components/card/Card.tsx","components/grid/Grid.tsx","components/grid/useIntersectionObserver.ts","App.tsx","reportWebVitals.ts","index.tsx","components/card/Card.module.scss","components/grid/Grid.module.scss"],"names":["module","exports","STORAGE_KEY","getFavourites","value","sessionStorage","getItem","JSON","parse","saveFavourites","favourites","setItem","stringify","saveFavourite","serverId","photoId","fav","addFavourite","index","findIndex","f","splice","removeFavourite","useFavourite","useState","setFav","useEffect","_fav","length","some","isFavourite","getPhotoUrl","secret","size","Picture","title","sources","media","map","el","src","srcSet","defaultSrc","className","styles","card_picture","alt","loading","memo","Card","owner","favourite","toggleFavourite","overlay","card_overlay","card_info_container","line_break","favourite_btn","onClick","card_outer_container","card_inner_container","Grid","perPageCount","page","useRef","photos","setPhotos","bottom","atBottom","bottomRef","intersectionOptions","intersectingElement","setIntersectingElement","isIntersecting","setIsIntersecting","observer","IntersectionObserver","entries","current","currentObserver","observe","disconnect","useIntersectionObserver","threshold","count","photosUrl","api_key","countPerPage","photosMetadataUrl","fetch","then","response","json","getPhotos","res","photo","outer_grid","side","grid","CardList","ref","i","server","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.999c5010.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_picture\":\"Picture_card_picture__2Dvzj\"};","const STORAGE_KEY = 'photos';\r\ninterface Favourite {\r\n    serverId: string;\r\n    photoId: string;\r\n}\r\n\r\nconst getFavourites = (): Favourite[] | null => {\r\n    const value = sessionStorage.getItem(STORAGE_KEY);\r\n    if (value) {\r\n        return JSON.parse(value) as Favourite[];\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst saveFavourites = (favourites: Favourite[]): void => {\r\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(favourites));\r\n}\r\n\r\nconst addFavourite = (serverId: string, photoId: string): void => {\r\n    let favourites = getFavourites();\r\n    if (favourites) {\r\n        favourites = [...favourites, { serverId, photoId }];\r\n        saveFavourites(favourites);\r\n    } else {\r\n        let favourites = [{ serverId, photoId }];\r\n\r\n        saveFavourites(favourites);\r\n    }\r\n}\r\n\r\nconst removeFavourite = (serverId: string, photoId: string): void => {\r\n    let favourites = getFavourites();\r\n    if (favourites) {\r\n        const index = favourites.findIndex((f) => f.serverId === serverId && f.photoId === photoId);\r\n        if(index !== -1) {\r\n            favourites.splice(index, 1);\r\n            saveFavourites(favourites);\r\n        }\r\n    }\r\n}\r\n\r\nconst isFavourite = (serverId: string, photoId: string): boolean => {\r\n    let favourites = getFavourites();\r\n    if (favourites) {\r\n        if (favourites && favourites.length > 0) {\r\n            return favourites.some((f) => f.serverId === serverId && f.photoId === photoId);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nconst saveFavourite = (serverId: string, photoId: string, fav: boolean): void => {\r\n    fav ? addFavourite(serverId, photoId) : removeFavourite(serverId, photoId);\r\n}\r\n\r\nexport { isFavourite, saveFavourite };","import { useEffect, useState } from 'react';\r\nimport { isFavourite, saveFavourite } from '../../integration/favourite';\r\n\r\nfunction useFavourite(serverId: string, photoId: string): [ boolean, () => void ] {\r\n    const [fav, setFav] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const _fav = isFavourite(serverId, photoId);\r\n        setFav(_fav);\r\n    }, [fav, serverId, photoId]);\r\n\r\n    const toggleFavourite = () => {\r\n        saveFavourite(serverId, photoId, !fav);\r\n        setFav(!fav);\r\n    };\r\n\r\n    return [fav, toggleFavourite];\r\n}\r\n\r\nexport { useFavourite };","import { RootObject } from './interfaces';\r\n\r\nconst FLICKR_KEY = '8808028abf5ea034d0492b2c5d5d9151';\r\n\r\nconst photosMetadataUrl = (api_key: string, countPerPage: number, page: number): string => {\r\n    const url = `https://www.flickr.com/services/rest/?method=flickr.photos.getRecent`\r\n                    + `&api_key=${api_key}`\r\n                    + `&per_page=${countPerPage}`\r\n                    + `&page=${page}`\r\n                    + `&format=json`\r\n                    + `&nojsoncallback=1`;\r\n    return url;\r\n}\r\n\r\nconst getPhotoUrl = (serverId: string, photoId: string, secret: string, size: string): string => {\r\n    const url = `https://live.staticflickr.com/${serverId}/${photoId}_${secret}_${size}.jpg`;\r\n    return url;\r\n}\r\n\r\nconst getPhotos = (page: number, count: number): Promise<RootObject> => {\r\n    const photosUrl = photosMetadataUrl(FLICKR_KEY, count, page);\r\n\r\n    return fetch(photosUrl)\r\n        .then((response) => response.json() as Promise<RootObject>);\r\n}\r\n\r\nexport { getPhotos, getPhotoUrl };","import { memo } from 'react';\r\n\r\nimport { getPhotoUrl } from '../../integration/flickr-client';\r\n\r\nimport styles from './Picture.module.scss';\r\n\r\n/* https://www.flickr.com/services/api/misc.urls.html\r\ns\tthumbnail\t75\tcropped square\r\nq\tthumbnail\t150\tcropped square\r\nt\tthumbnail\t100\t\r\nm\tsmall\t240\t\r\nn\tsmall\t320\t\r\nw\tsmall\t400\t\r\n(none)\tmedium\t500\t\r\nz\tmedium\t640\t\r\nc\tmedium\t800\t \r\n*/\r\n\r\nfunction Picture({ serverId, photoId, secret, title }: { serverId: string, photoId: string, secret: string, title: string }): JSX.Element {\r\n\r\n    const mediaSize = [\r\n        { media: '(min-width: 310px) and (max-width: 420px)', size: 'q' },\r\n        { media: '(min-width: 421px) and (max-width: 768px)', size: 'n' },\r\n        { media: '(min-width: 769px) and (max-width: 1366px)', size: 'w' },\r\n        { media: '(min-width: 1367px)', size: 'z' }\r\n    ];\r\n\r\n    const mediaUrls = mediaSize.map((el) => {\r\n        return {\r\n            media: el.media,\r\n            src: getPhotoUrl(serverId, photoId, secret, el.size)\r\n        };\r\n    });\r\n\r\n    const sources = mediaUrls.map((el) => <source key={el.media} srcSet={el.src} media={el.media} />);\r\n\r\n    const defaultSrc = getPhotoUrl(serverId, photoId, secret, 'z');\r\n\r\n    return (\r\n        <picture className={styles.card_picture}>\r\n            { sources }\r\n            <img src={defaultSrc} alt={title} loading=\"lazy\" />\r\n        </picture>\r\n    )\r\n}\r\n\r\nexport default memo(Picture);","import { useFavourite } from './useFavourite';\r\nimport { default as Picture } from '../picture/Picture';\r\n\r\nimport styles from './Card.module.scss';\r\nexport interface CardProp {\r\n    serverId: string, \r\n    photoId: string, \r\n    secret: string, \r\n    title: string,\r\n    owner: string\r\n}\r\n\r\nfunction Card({ serverId, photoId, secret, title, owner }: CardProp) {\r\n    const [favourite, toggleFavourite] = useFavourite(serverId, photoId);\r\n\r\n    const makeFavourite = () => {\r\n        toggleFavourite();\r\n    };\r\n\r\n    const overlay = (\r\n        <div className={styles.card_overlay}>\r\n            <div className={styles.card_info_container}>\r\n                <div className={styles.title}>{title}</div>\r\n                <hr className={styles.line_break}/>\r\n                <div className={styles.owner}>{owner}</div>\r\n                <button className={styles.favourite_btn}\r\n                    onClick={() => makeFavourite()}>\r\n                    { favourite ? 'Unfavourite' : 'Favourite' }\r\n                </button>\r\n            </div>\r\n        </div>);\r\n\r\n    return (\r\n        <div className={styles.card_outer_container}>\r\n            <div className={styles.card_inner_container}>\r\n                <Picture serverId={serverId} \r\n                    photoId={photoId} \r\n                    secret={secret}  \r\n                    title={title} />\r\n            </div>\r\n            { overlay }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Card };","import { useEffect, useRef, useState } from 'react';\r\n\r\nimport { useIntersectionObserver } from './useIntersectionObserver';\r\nimport { Card } from '../card/Card';\r\nimport { getPhotos } from '../../integration/flickr-client';\r\nimport { Photo } from '../../integration/interfaces';\r\n\r\nimport styles from './Grid.module.scss';\r\n\r\nfunction Grid({ perPageCount }: { perPageCount: number }) {\r\n    const page = useRef<number>(0);\r\n    const [photos, setPhotos] = useState<Photo[]>([]);\r\n\r\n    const bottom = useRef(null);\r\n    const atBottom = useIntersectionObserver(bottom, { threshold: 0 });\r\n\r\n    useEffect(() => {\r\n        if(atBottom) {\r\n            page.current = page.current + 1;\r\n\r\n            getPhotos(page.current, perPageCount).then((res) => {\r\n                setPhotos((photos) => [...photos, ...res.photos.photo]);\r\n            });\r\n        }\r\n    }, [atBottom, perPageCount]);\r\n\r\n    return (\r\n            <div className={styles.outer_grid}>\r\n                <div className={styles.side}></div>\r\n                <div>\r\n                    <div className={styles.grid}>\r\n                        <CardList photos={photos} />\r\n                    </div>\r\n                    <div ref={bottom} className={styles.loading}>Loading...</div>\r\n                </div>\r\n                <div className={styles.side}></div>\r\n                \r\n            </div>\r\n    );\r\n}\r\n\r\nfunction CardList({photos}: {photos: Photo[]}): JSX.Element {\r\n    return (\r\n        <>\r\n            {\r\n                photos.map((photo, i) => <Card key={ `${photo.server}_${photo.id}_${i}` }\r\n                                                serverId={photo.server} \r\n                                                photoId={photo.id} \r\n                                                secret={photo.secret} \r\n                                                title={photo.title}\r\n                                                owner={photo.owner} \r\n                                        />)\r\n            }\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport { Grid };","import { useState, useRef, useEffect, MutableRefObject } from \"react\";\r\n\r\nexport function useIntersectionObserver(bottomRef: MutableRefObject<Element | null>,\r\n                                        intersectionOptions: { root?: any, rootMargin?: string, threshold?: number } = {}) {\r\n\r\n    const [intersectingElement, setIntersectingElement] = useState<Element | null>(null);\r\n    const [isIntersecting, setIsIntersecting] = useState(false);\r\n\r\n    const observer = useRef<IntersectionObserver>(\r\n        new IntersectionObserver((entries) => {\r\n            const firstEntry = entries[0]; // we have only one intersection element therefore only one entry\r\n            const isIntersecting = firstEntry.isIntersecting;\r\n            setIsIntersecting(isIntersecting);\r\n        },\r\n        { ...intersectionOptions })\r\n    );\r\n\r\n    // set intersecting element on ref change\r\n    useEffect(() => {\r\n        setIntersectingElement(bottomRef.current);\r\n    }, [bottomRef]);\r\n\r\n    useEffect(() => {\r\n        if (intersectingElement) {\r\n            const currentObserver = observer.current;\r\n\r\n            // observe intersecting element\r\n            currentObserver.observe(intersectingElement);\r\n\r\n            return () => currentObserver.disconnect();\r\n        }\r\n    }, [intersectingElement]);\r\n\r\n    return isIntersecting;\r\n}\r\n","import { Grid } from './components';\r\n\r\nfunction App() {\r\n  return (\r\n    <main>\r\n      <Grid perPageCount={20} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_outer_container\":\"Card_card_outer_container__3Uy5j\",\"card_overlay\":\"Card_card_overlay__3yGl3\",\"card_info_container\":\"Card_card_info_container__2ZZ8N\",\"title\":\"Card_title__1pIlc\",\"line_break\":\"Card_line_break__3Ql7p\",\"owner\":\"Card_owner__3FCWj\",\"favourite_btn\":\"Card_favourite_btn__2y_g7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer_grid\":\"Grid_outer_grid__2VCtP\",\"grid\":\"Grid_grid__2JUWQ\",\"side\":\"Grid_side__214kV\",\"loading\":\"Grid_loading__3FwLn\"};"],"sourceRoot":""}