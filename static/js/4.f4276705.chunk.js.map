{"version":3,"sources":["config.ts","services/request.builder.ts","services/omdb.service.ts","views/MovieDetailView.tsx"],"names":["RequestBuilder","baseUrl","url","params","this","URL","URLSearchParams","apiKey","setParam","search","type","year","page","String","id","toString","key","value","set","apikey","searchMovies","requestBuilder","setApiKey","setSearch","setYear","setType","setPage","build","fetch","then","res","json","getMovieById","setId","uri","Container","styled","div","DetailView","useState","movie","setMovie","useParams","useEffect","movieResponse","title","Title","Type","Year","poster","Poster","imdbRating","imdbVotes","genre","Genre","plot","Plot","actors","Actors","language","Language","country","Country"],"mappings":"iLAAA,I,gBCCaA,EAAb,WAII,WAA6BC,GAAkB,yBAAlBA,UAAiB,KAHtCC,SAGsC,OAFtCC,YAEsC,EAC1CC,KAAKF,IAAM,IAAIG,IAAIJ,GACnBG,KAAKD,OAAS,IAAIG,gBAN1B,6CASI,SAAiBC,GAEb,OADAH,KAAKI,SAAS,SAAUD,GACjBH,OAXf,uBAcI,SAAiBK,GAEb,OADAL,KAAKI,SAAS,IAAKC,GACZL,OAhBf,qBAmBI,SAAeM,GAEX,OADAN,KAAKI,SAAS,OAAQE,GACfN,OArBf,qBAwBI,SAAeO,GAEX,OADAP,KAAKI,SAAS,IAAKG,GACZP,OA1Bf,qBA6BI,WAA0B,IAAXQ,EAAU,uDAAH,EAElB,OADAR,KAAKI,SAAS,OAAQK,OAAOD,IACtBR,OA/Bf,mBAkCI,SAAaU,GAET,OADAV,KAAKI,SAAS,IAAKM,GACZV,OApCf,mBAuCI,WAGI,OAFAA,KAAKF,IAAIO,OAASL,KAAKD,OAAOY,WAEvBX,KAAKF,MA1CpB,sBA6CI,SAAiBc,EAAaC,GAC1Bb,KAAKD,OAAOe,IAAIF,EAAKC,OA9C7B,KCIMf,EFLe,0BEMfiB,EFLU,WEOVC,EAAe,SAACX,EAAgBE,EAAeD,GACjD,IAAMW,EAAiB,IAAIrB,EAAeE,GAK1C,OAJAmB,EAAeC,UAAUH,GAAQI,UAAUd,GAC3CE,GAAQU,EAAeG,QAAQb,GAC/BD,GAAQW,EAAeI,QAAQf,GAExB,SAACE,GACJS,EAAeK,QAAQd,GACvB,IAAMV,EAAMmB,EAAeM,QAAQZ,WAEnC,OAAOa,MAAM1B,GACR2B,MAAmB,SAACC,GAAD,OAASA,EAAIC,YAItC,SAASC,EAAalB,GACzB,IAAMO,EAAiB,IAAIrB,EAAeE,GAC1CmB,EAAeC,UAAUH,GAAQc,MAAMnB,GAEvC,IAAMoB,EAAMb,EAAeM,QAAQZ,WAEnC,OAAOa,MAAMM,GACRL,MAAoB,SAACC,GAAD,OAASA,EAAIC,Y,wGCOpCI,EAAYC,IAAOC,IAAV,8CAIAC,UAjCI,WACf,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAGQ3B,EAAO4B,cAAP5B,GAQR,OANA6B,qBAAU,WAENX,YAAalB,GACRe,MAAK,SAACe,GAAD,OAAmBH,EAASG,QACvC,CAAC9B,IAGA,cAACqB,EAAD,UACI,cAAC,IAAD,CAAaU,MAAK,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAOM,MACdpC,KAAI,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAOO,KACbpC,KAAI,OAAE6B,QAAF,IAAEA,OAAF,EAAEA,EAAOQ,KACbC,OAAM,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAOU,OACfC,WAAU,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAOW,WACnBC,UAAS,OAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAOY,UAClBC,MAAK,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAOc,MACdC,KAAI,OAAEf,QAAF,IAAEA,OAAF,EAAEA,EAAOgB,KACbC,OAAM,OAAEjB,QAAF,IAAEA,OAAF,EAAEA,EAAOkB,OACfC,SAAQ,OAAEnB,QAAF,IAAEA,OAAF,EAAEA,EAAOoB,SACjBC,QAAO,OAAErB,QAAF,IAAEA,OAAF,EAAEA,EAAOsB","file":"static/js/4.f4276705.chunk.js","sourcesContent":["const API_BASE_URL = 'https://www.omdbapi.com';\r\nconst API_KEY = '833c72c1';\r\n\r\nexport { API_BASE_URL, API_KEY };","\r\nexport class RequestBuilder {\r\n    private url: URL;\r\n    private params: URLSearchParams;\r\n\r\n    constructor(private readonly baseUrl: string) {\r\n        this.url = new URL(baseUrl);\r\n        this.params = new URLSearchParams();\r\n    }\r\n\r\n    public setApiKey(apiKey: string) {\r\n        this.setParam('apiKey', apiKey);\r\n        return this;\r\n    }\r\n\r\n    public setSearch(search: string) {\r\n        this.setParam('s', search);\r\n        return this;\r\n    }\r\n\r\n    public setType(type: string) {\r\n        this.setParam('type', type);\r\n        return this;\r\n    }\r\n\r\n    public setYear(year: string) {\r\n        this.setParam('y', year);\r\n        return this;\r\n    }\r\n\r\n    public setPage(page = 1) {\r\n        this.setParam('page', String(page));\r\n        return this;\r\n    }\r\n\r\n    public setId(id: string) {\r\n        this.setParam('i', id);\r\n        return this;\r\n    }\r\n\r\n    public build() {\r\n        this.url.search = this.params.toString();\r\n\r\n        return this.url;\r\n    }\r\n\r\n    private setParam(key: string, value: string) {\r\n        this.params.set(key, value);\r\n    }\r\n}","import { API_BASE_URL, API_KEY } from \"../config\";\r\nimport { MovieResponse } from \"./movie.response\";\r\nimport { RequestBuilder } from \"./request.builder\";\r\nimport { SearchResult } from \"./search.response\";\r\n\r\nconst url = API_BASE_URL;\r\nconst apikey = API_KEY;\r\n\r\nconst searchMovies = (search: string, year?: string, type?: string) => {\r\n    const requestBuilder = new RequestBuilder(url);\r\n    requestBuilder.setApiKey(apikey).setSearch(search);\r\n    year && requestBuilder.setYear(year);\r\n    type && requestBuilder.setType(type);\r\n\r\n    return (page: number) => {\r\n        requestBuilder.setPage(page);\r\n        const url = requestBuilder.build().toString();\r\n    \r\n        return fetch(url)\r\n            .then<SearchResult>((res) => res.json());\r\n    }\r\n}\r\n\r\nexport function getMovieById(id: string) {\r\n    const requestBuilder = new RequestBuilder(url);\r\n    requestBuilder.setApiKey(apikey).setId(id);\r\n\r\n    const uri = requestBuilder.build().toString();\r\n\r\n    return fetch(uri)\r\n        .then<MovieResponse>((res) => res.json());\r\n}\r\n\r\n\r\nexport { searchMovies }","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport MovieDetail from \"../components/MovieDetail/MovieDetail\";\r\nimport { getMovieById, MovieResponse } from \"../services\";\r\n\r\n\r\nconst DetailView = () => {\r\n    const [movie, setMovie] = useState<MovieResponse>();\r\n\r\n    // Get movie id from url params\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        // Fetch movie data\r\n        getMovieById(id)\r\n            .then((movieResponse) => setMovie(movieResponse));\r\n    }, [id]);\r\n\r\n    return (\r\n        <Container>\r\n            <MovieDetail title={movie?.Title}\r\n                         type={movie?.Type}\r\n                         year={movie?.Year}\r\n                         poster={movie?.Poster}\r\n                         imdbRating={movie?.imdbRating}\r\n                         imdbVotes={movie?.imdbVotes}\r\n                         genre={movie?.Genre}\r\n                         plot={movie?.Plot}\r\n                         actors={movie?.Actors}\r\n                         language={movie?.Language}\r\n                         country={movie?.Country}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    margin: 20px\r\n`;\r\n\r\nexport default DetailView;"],"sourceRoot":""}